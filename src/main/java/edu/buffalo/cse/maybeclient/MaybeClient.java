package edu.buffalo.cse.maybeclient;

import edu.buffalo.cse.maybeclient.rest.Device;
import edu.buffalo.cse.maybeclient.rest.EmptyResponse;
import edu.buffalo.cse.maybeclient.rest.MaybeRESTService;
import edu.buffalo.cse.maybeclient.rest.ServiceFactory;
import retrofit.Call;
import retrofit.Response;

import java.io.IOException;
import java.util.List;

/*
 * This Java source file was auto generated by running 'gradle buildInit --type java-library'
 * by 'xcv58' at '10/15/15 9:47 AM' with Gradle 2.7
 *
 * @author xcv58, @date 10/15/15 9:47 AM
 */
public class MaybeClient {
    /**
     * sync will first try GET from baseUrl
     * If get updated result, just return it
     * Otherwise, that means the deviceId is not registered on the server
     * it try POST deviceId to baseUrl and return the Device it receives
     * @param baseUrl the baseUrl of Maybe backend
     * @param deviceId the device id used to identify this device
     * @return Device object get from server
     */
    public Device sync(String baseUrl, String deviceId) {
        return this.sync(baseUrl, deviceId, null);
    }

    /**
     * sync will first try GET from baseUrl
     * If get updated result, just return it
     * Otherwise, that means the deviceId is not registered on the server
     * it try POST deviceId to baseUrl and return the Device it receives
     * @param baseUrl the baseUrl of Maybe backend
     * @param deviceId the device id used to identify this device
     * @param gcmId Google Cloud Messaging id, default is null
     * @return Device object get from server
     */
    public Device sync(String baseUrl, String deviceId, String gcmId) {
        // TODO: handle gcmId
        final MaybeRESTService maybeRESTService = ServiceFactory.createRetrofitService(MaybeRESTService.class, baseUrl);

        Device device = this.getDevice(maybeRESTService, deviceId);

        if (device == null) {
            return this.post(maybeRESTService, deviceId, gcmId);
        }

        return device;
    }

    /**
     * GET device with deviceId from baseUrl
     * @param baseUrl the baseUrl of Maybe backend
     * @param deviceId the device id used to identify this device
     * @return retrieved Device object or null if anything bad happen
     */
    public Device getDevice(String baseUrl, String deviceId) {
        final MaybeRESTService maybeRESTService = ServiceFactory.createRetrofitService(MaybeRESTService.class, baseUrl);
        return this.getDevice(maybeRESTService, deviceId);
    }

    private Device getDevice(MaybeRESTService maybeRESTService, String deviceId) {
        Call<List<Device>> getCall = maybeRESTService.getDevice(deviceId);
        try {
            Response<List<Device>> getResponse = getCall.execute();
            if (getResponse.isSuccess()) {
                List<Device> deviceList = getResponse.body();
                if (deviceList.size() > 0) {
                    return deviceList.get(0);
                } else {
                    // TODO: enforce this will never happen.
                    return null;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    private Device post(MaybeRESTService maybeRESTService, String deviceId, String gcmId) {
        Device postDevice = new Device();
        postDevice.deviceid = deviceId;
        Call<Device> postCall = maybeRESTService.postDevice(postDevice);
        try {
            Response<Device> postResponse = postCall.execute();
            if (postResponse.isSuccess()) {
                return postResponse.body();
            } else {
                // TODO: handle POST failed
                return null;
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    /**
     * DELETE device with deviceId from baseUrl
     * @param baseUrl the baseUrl of Maybe backend
     * @param deviceId the device id to delete
     * @return EmptyResponse if success, otherwise null
     */
    public EmptyResponse delDevice(String baseUrl, String deviceId) {
        final MaybeRESTService maybeRESTService = ServiceFactory.createRetrofitService(MaybeRESTService.class, baseUrl);
        return this.delDevice(maybeRESTService, deviceId);
    }

    private EmptyResponse delDevice(MaybeRESTService maybeRESTService, String deviceId) {
        Call<EmptyResponse> delCall = maybeRESTService.delDevice(deviceId);
        try {
            Response<EmptyResponse> delResponse = delCall.execute();
            if (delResponse.isSuccess()) {
                return delResponse.body();
            } else {
                return null;
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }
}
